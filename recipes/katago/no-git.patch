diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index 53d28555..db8f1b68 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -136,16 +136,16 @@ else()
   else()
     message(STATUS "Including Git revision in the compiled executable, specify -DNO_GIT_REVISION=1 to disable")
   endif()
-  find_package(Git)
-  if(NOT GIT_FOUND)
-    set(GIT_EXECUTABLE ${GIT_EXECUTABLE} CACHE FILEPATH "Path to git executable")
-    mark_as_advanced(CLEAR GIT_EXECUTABLE)
-    if(BUILD_DISTRIBUTED)
-      message(SEND_ERROR "${ColorBoldRed}Git executable was not found, specify GIT_EXECUTABLE as the path to the git executable.${ColorReset}")
-    else()
-      message(SEND_ERROR "${ColorBoldRed}Git executable was not found. Either specify GIT_EXECUTABLE as the path to the git executable, or use NO_GIT_REVISION to disable.${ColorReset}")
-    endif()
-  endif()
+  # find_package(Git)
+  # if(NOT GIT_FOUND)
+  #   set(GIT_EXECUTABLE ${GIT_EXECUTABLE} CACHE FILEPATH "Path to git executable")
+  #   mark_as_advanced(CLEAR GIT_EXECUTABLE)
+  #   if(BUILD_DISTRIBUTED)
+  #     message(SEND_ERROR "${ColorBoldRed}Git executable was not found, specify GIT_EXECUTABLE as the path to the git executable.${ColorReset}")
+  #   else()
+  #     message(SEND_ERROR "${ColorBoldRed}Git executable was not found. Either specify GIT_EXECUTABLE as the path to the git executable, or use NO_GIT_REVISION to disable.${ColorReset}")
+  #   endif()
+  # endif()
   set(GIT_HEADER_FILE_TEMPLATE_BARE program/gitinfotemplate.h)
   set(GIT_HEADER_FILE_ALWAYS_UPDATED_BARE program/gitinfoupdated.h)
   set(GIT_HEADER_FILE_BARE program/gitinfo.h)
@@ -155,7 +155,8 @@ else()
   add_custom_command(
     OUTPUT ${GIT_HEADER_FILE_ALWAYS_UPDATED}
     COMMAND ${CMAKE_COMMAND} -E copy ${GIT_HEADER_FILE_TEMPLATE} ${GIT_HEADER_FILE_ALWAYS_UPDATED}
-    COMMAND ${GIT_EXECUTABLE} describe --match=DummyTagNotExisting --always --abbrev=40 --dirty >> ${GIT_HEADER_FILE_ALWAYS_UPDATED}
+    # COMMAND ${GIT_EXECUTABLE} describe --match=DummyTagNotExisting --always --abbrev=40 --dirty >> ${GIT_HEADER_FILE_ALWAYS_UPDATED}
+    COMMAND ${CMAKE_COMMAND} -E echo "cd0ed6c0712088ddb901be68189ba7fa1439a9e7" >> ${GIT_HEADER_FILE_ALWAYS_UPDATED}
     COMMAND ${CMAKE_COMMAND} -E copy_if_different ${GIT_HEADER_FILE_ALWAYS_UPDATED} ${GIT_HEADER_FILE}
     COMMAND ${CMAKE_COMMAND} -E remove ${GIT_HEADER_FILE_ALWAYS_UPDATED}
     WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
